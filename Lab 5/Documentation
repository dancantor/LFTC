There is a finite automata defined in file finedAutomata.in
It should be able to decide if a token is identifier or if a token is a integer constant

Class FiniteAutomata will read the file when it is initialized, will parse the input file and then
populate all the fields in the class
states = [] -> is an array which contains all the possible states
alphabet = [] -> is an array which contains all the possible letters
transitions = {} -> this would represent a map, where the key represents a pair between (state, alphabet_value)
                    and the value represents the projection of the two
initial_state = "" -> a simple string would be enough because we can have only one initial_state
final_states = [] -> the array of final states

there is also a menu from which you can print separate parameters of the finite automata

In order to check if an word is generated by the fa, we have 2 functions, one for integers and one for identifiers
Considering that we have a dfa, we don't need to check for multiple entrances in the transitions dictionary, only 1

ex: 12-34, check if integer:
(q0, '') -> (q5, '1') -> (q5, '12') -> at that point, no transition is found, so we return false
ex: 1234, check if integer
(q0, '') -> (q5, '1') -> (q5, '12') -> (q5, '123') -> (q5, '1234')

EBNF for finiteAutomata.in

fa.in ::= "M = {\n" Q "\n" E '\n' RO '\n' q0 '\n' F
Q ::= {state","} state
E ::= {alphLetter","} alphLetter
RO ::= "start\n"